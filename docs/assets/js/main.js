"use strict";const radioBtns=document.querySelectorAll("input[name=cards-number]"),startBtn=document.querySelector("#start-btn"),cardsContainer=document.querySelector(".cards__list");let cards=[],gameSize=localStorage.getItem("game-size"),saveData=[];const getGameSizeFromLocal=()=>{gameSize=localStorage.getItem("game-size");for(const e of radioBtns)e.value===gameSize&&(e.checked=!0);return gameSize},getGameSizeFromInput=()=>{for(const e of radioBtns)e.checked&&(gameSize=parseInt(e.value),localStorage.setItem("game-size",gameSize));return gameSize},createCard=e=>{const a=document.createElement("div");a.classList.add("hidden");const t=document.createElement("img");t.classList.add("card__img"),t.src=e.image,a.appendChild(t);const r=document.createElement("div");r.classList.add("back-card","hidden");const n=document.createElement("img");n.src="https://via.placeholder.com/160x195/30d9c4/ffffff/?text=ADALAB",r.appendChild(n);const d=document.createElement("li");d.classList.add("card"),d.dataset.pair=e.pair,d.appendChild(a),d.appendChild(r),cardsContainer.appendChild(d)},printCards=()=>{for(const e of saveData)createCard(e)},turnCard=e=>{e.currentTarget.firstElementChild.classList.toggle("front-card"),e.currentTarget.lastElementChild.classList.toggle("back-card")},addEventOnCards=()=>{cards=document.querySelectorAll(".card");for(const e of cards)e.addEventListener("click",handleCardClick)},handleCardClick=e=>{turnCard(e),changeDafaFace(e),compareCards(e)},getDataFromServer=()=>{fetch(`https://raw.githubusercontent.com/Adalab/cards-data/master/${gameSize}.json`).then(e=>e.json()).then(e=>saveData=e).then(()=>printCards()).then(()=>addEventOnCards())},generateCards=()=>{fetch(`https://raw.githubusercontent.com/Adalab/cards-data/master/${gameSize}.json`).then(e=>e.json()).then(e=>saveData=e).then(()=>printCards()).then(()=>addEventOnCards())},cleanCardsContainer=()=>cardsContainer.innerHTML="",startGame=()=>{gameSize?getGameSizeFromLocal():getGameSizeFromInput(),generateCards()},handleStartBtnClick=()=>{getGameSizeFromInput(),cleanCardsContainer(),generateCards()};gameSize?getGameSizeFromLocal():getGameSizeFromInput(),generateCards(),startBtn.addEventListener("click",handleStartBtnClick);const turnDontMatchingCards=e=>{e.firstElementChild.classList.toggle("front-card"),e.lastElementChild.classList.toggle("back-card"),e.dataset.face="back"};let turnedCards=[];const compareCards=()=>{turnedCards=[];for(let e=0;e<cards.length;e++)if("front"===cards[e].dataset.face&&(turnedCards.push(cards[e]),2===turnedCards.length)){if(turnedCards[0].dataset.pair===turnedCards[1].dataset.pair)for(const e of turnedCards)e.classList.add("match-pair"),e.dataset.face="blocked",e.removeEventListener("click",handleCardClick);else for(const e of turnedCards)setTimeout(turnDontMatchingCards.bind(null,e),1e3);turnedCards=[]}},changeDafaFace=e=>{"front"===e.currentTarget.dataset.face?e.currentTarget.dataset.face="back":e.currentTarget.dataset.face="front"};